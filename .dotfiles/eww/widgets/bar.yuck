
(
  deflisten username
  "whoami"
)

(
  deflisten day
  "date '+%d'"
)

(
  deflisten month
  "date '+%m'"
)

(
  deflisten year
  "date '+%Y'"
)

(
  defpoll time
  :interval "1s"
  `date +'{"hour":"%H", "minute":"%M", "second":"%S"}'`
)

(
  defpoll volume
  :interval "50ms"
  "scripts/volume.sh"
)

(
  defvar tags "[1, 2, 4, 8, 16, 32, 64, 128, 256]"
)

(
  defwidget taglist []
  (
    box
    :class "taglist"
    :space-evenly false
    :orientation "v"
    (
      for tag in tags
      (
        button
        :class "tag icons"
        :onclick "riverctl set-focused-tags ${tag}"
        :onrightclick "riverctl toggle-focused-tags ${tag}"
        {
          tag == 1   ? "" :
          tag == 2   ? "󰈹" :
          tag == 4   ? "" :
          tag == 8   ? "󱓷" :
          tag == 16  ? "󰙯" :
          tag == 32  ? "" :
          tag == 64  ? "󱩽" :
          tag == 128 ? "" :
          tag == 256 ? "" :
          ""
        }
      )
    )
  )
)

(
  defwidget date_time []
  (
    box
    :orientation "v"
    :valign "center"

    (
      button
      :onclick "eww open calendar --toggle"
      "${time.hour}"
    )
    (
      button
      :onclick "eww open calendar --toggle"
      "${time.minute}"
    )
    (
      button
      :onclick "eww open calendar --toggle"
      "${time.second}"
    )
  )
)

(
  defwidget cal []
  (
    box
    :class "cal-box"
    :orientation "v"

    (
      box
      :class "cal-inner-box"

      (
        calendar
        :class "cal"
        :day day
        :month month
        :year year
      )
    )
  )
)

(
  defwidget power []
  (
    button
    :class "power icons"
    :onclick "eww kill; eww open powermenu"
    "󰐥"
  )
)

(defpoll battery_percent :interval "60s" "cat /sys/class/power_supply/BAT?/capacity 2>/dev/null | head -1")

(
 defwidget battery []
  (
   button
    :class "icons"
    :tooltip "Battery: ${battery_percent}%"
     {
       battery_percent == 0 ? "󰂎" :
       battery_percent <= 10 ? "󰁺" :
       battery_percent <= 20 ? "󰁻" :
       battery_percent <= 30 ? "󰁼" :
       battery_percent <= 40 ? "󰁽" :
       battery_percent <= 50 ? "󰁾" :
       battery_percent <= 60 ? "󰁿" :
       battery_percent <= 70 ? "󰂀" :
       battery_percent <= 80 ? "󰂁" :
       battery_percent <= 90 ? "󰂂" : "󰁹"
     }
  )
)
 
(defpoll brightness_percent :interval "1s" "scripts/brightness --get_brightness | awk -F '%' '{print $1}'")

(
 defwidget brightness []
 (
  eventbox
   :onscroll "echo {} | sed -e 's/up/--inc/g' -e 's/down/--dec/g' | xargs brightness"
  (
   button
    :class "icons"
    :tooltip "Brightness ${battery_percent}%"
     {
       brightness_percent <= 30 ? "󰃞" : 
       brightness_percent <= 60 ? "󰃟" : "󰃠"
     }
  )
 )
)

(defpoll wifi_name :interval "1s" "scripts/wifi --get_name")
(defpoll wifi_status :interval "1s" "scripts/wifi --get_status")
(defpoll wifi_strengh :interval "1s" "scripts/wifi --get_strengh")

(
 defwidget wifi []
 (
  eventbox
   :cursor "pointer"
  (
   button
    :class "icons"
    :onclick "scripts/on-off"
    :tooltip "${wifi_name}"
     {
      wifi_status == "down" || wifi_strengh == 0 ? "󰤯" :
      wifi_status == "up" && wifi_strengh <= 20 ? "󰤟" :
      wifi_status == "up" && wifi_strengh <= 40 ? "󰤢" :
      wifi_status == "up" && wifi_strengh <= 70 ? "󰤥" : "󰤨"
     }
  ) 
 )
)

(
  defwidget left []
  (
    box
    :class "left"
    :orientation "v"
    :space-evenly false
    :valign "start"

    (taglist)
  )
)

( defwidget center []
  (
    box
    :class "center"
    :orientation "v"
    :space-evenly false
    :valign "center"

    (date_time)
  )
)

(
  defwidget right []
  (
    box
    :class "right"
    :space-evenly false
    :valign "end"
    :orientation "v"
    :spacing 10

    (
      eventbox
      :onscroll "scripts/scroll_volume.sh {}"
      :onclick "pavucontrol&"
      :onrightclick "wpctl set-mute @DEFAULT_SINK@ toggle"
      (
        label
        :text volume
        :angle 90
      )
    )
    (brightness)
    (wifi)
    (battery)
    (
      label
      :text username
      :angle 90
    )

    (power)
  )
)

(
  defwidget bar []
  (
    box
    :class "bar"
    :orientation "v"
    :vexpand "false"
    :hexpand "false"

    (left)
    (center)
    (right)
  )
)
